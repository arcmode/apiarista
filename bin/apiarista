#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander'),
    async = require('async'),
    wrench = require('wrench'),
    path = require('path'),
    os = require('os'),
    fs = require('fs'),
    replace = require('replace'),
    assert = require('assert-plus');

// CLI

program
  .version(require('../package').version)
  .option('-i, install', 'install base api only')
  .option('-r, resource [ResourceName]', 'generate resource (default: "resource")')
  .option('-o, --owner [OwnerName]', 'define an owner (default: "user")')
  .option('-a, --auth', 'authenticate the resource')
  .option('-f, --force', 'disable abort on path exists')
  .option('-d, --debug', 'output debug data');

// custom help

program.on('--help', function(){
  console.log('  Example:');
  console.log('');
  console.log('    $ apiarista resource consumer --auth');
  console.log('    $ apiarista -r user -a --owner consumer');
  console.log('    $ apiarista -r blog "title: { String, required: true }" -o user');
  console.log('');
});

// parse arguments

program.parse(process.argv);

// utility to propercase the resource name

String.prototype.toProperCase = function () {
    return this.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
};

// names

var defaultResourceName = 'resource',
    resourceName = (program.resource && typeof program.resource === 'string') ? program.resource : defaultResourceName,
    lowerName = resourceName && resourceName.toLowerCase(),
    properName = resourceName && resourceName.toProperCase(),
    defaultLowerName = defaultResourceName.toLowerCase(),
    defaultProperName = defaultResourceName.toProperCase(),
    projectName = path.basename(currentDir);

function templateName(name) {
  return ('\\$' + name);
}

function pluralize(name) {
  return (name + 's');
}

// end-of-line code

var eol = 'win32' == os.platform() ? '\r\n' : '\n';

// dirs to operate

var templateDir = path.join(__dirname, '../node_modules/apiarista-template'),
    currentDir = process.cwd();

// data used during operations

var methods = {
      testApp: testApp
    , createCommonDirs: createCommonDirs
    , createCommonFiles: createCommonFiles
    , replaceConfig: replaceConfig
    , checkResourceExistence: checkResourceExistence
    , createResource: createResource
    , replaceNames: replaceNames
    , upgradeSchema: upgradeSchema
    , replaceConditionals: replaceConditionals
    , upgradeApiIndex: upgradeApiIndex
    , updateDependencies: updateDependencies
  };

var data = {
  pipeline: [testApp],
  mkdirMode: 0777 & (~process.umask()),
  app: undefined,
  absent: [],
  present: [],
  created: []
}

// build pipeline

if (program.install) {

  data.pipeline.push(
                      methods.createCommonDirs,
                      methods.createCommonFiles,
                      methods.replaceConfig,
                      methods.updateDependencies
                    );

} else if (program.resource) {

  data.pipeline.push(
                      methods.createCommonDirs,
                      methods.createCommonFiles,
                      methods.replaceConfig
                    );

  if (!program.force) { data.pipeline.push(methods.checkResourceExistence); }

  data.pipeline.push(
                      methods.createResource,
                      methods.replaceNames,
                      methods.upgradeSchema,
                      methods.replaceConditionals,
                      methods.upgradeApiIndex,
                      methods.updateDependencies
                    );
} else {

  abort('    bad input')
}

// operate in series

console.log();

async.series(data.pipeline, function(err, results){

  if (err) { abort(err); }

  console.log();

  // inspired by '../node_modules/express/bin/express'.

  console.log('   plug the API:');
  console.log('     $ echo -e "\\nrequire(\'./api\')(app);" >> app.js');

  console.log();

  console.log('   install dependencies:');
  console.log('     $ npm install');

  console.log();

  console.log('   run the app:');
  console.log('     $ node app');

  if (program.debug) {

    console.log('   Results:');
    console.log();
    console.log(results);
    console.log('   DEBUG:');
    console.log();
    console.log(data);
  }
  console.log();
});

/**
 * Test process.cwd() is a Node.js application.
 *
 * Abort unless api.js or server.js are founded (not recursive).
 */

function testApp(callback){
  fs.exists(path.join(currentDir, '/app.js'), function(exists){
    if (exists) {
      data.app = '/app.js';
      data.present.push(data.app);
      callback(null, data.app);
    } else {
      fs.exists(path.join(currentDir, '/server.js'), function(exists){
        if (exists) {
          data.app = '/server.js';
          data.present.push(data.app);
          callback(null, data.app);
        } else {
          data.absent.push(data.app);
          abort('    app/server not found')
        }
      });
    }
  });
};

/**
 * Create base dirs.
 *
 * Create data, api and subdirs.
 */

function createCommonDirs(callback) {
  var dirs = [
    '/data',
    '/data/schemas',
    '/data/models',
    '/data/config',
    '/data/utils',
    '/api',
    '/api/middleware',
    '/api/resources'
  ];

  dirs.forEach(function(dir){
    dirPath = path.join(currentDir, dir);
        exists = fs.existsSync(dirPath);
    if (exists) {
      data.present.push(dirPath);
    } else {
      data.absent.push(dirPath);
      mkdirSync(dirPath, data.mkdirMode);
      data.created.push(dirPath);
    }
  });
  callback(null, 'createCommonDirs');
};

/**
 * Create base files.
 *
 * Create api middlewares and user and consumer resources including schema, model and crud.
 */

function createCommonFiles(callback) {
  var files = [
    '/data/config/db.js',
    '/data/config/auto.js',
    '/data/utils/tokenize.js',
    '/api/index.js',
    '/api/middleware/load.js',
    '/api/middleware/auth.js',
    '/api/middleware/same.js',
    '/api/middleware/ownership.js',
    '/api/middleware/send.js',
  ];

  files.forEach(function(file){
    var filePath = path.join(currentDir, file),
        exists = fs.existsSync(filePath);
    if (exists) {
      data.present.push(filePath);
    } else {
      var templateFilePath = path.join(templateDir, file),
          templateFileContent = fs.readFileSync(templateFilePath);
      data.absent.push(filePath)
      writeFileSync(filePath, templateFileContent, 'utf8');
      data.created.push(filePath)
    }
  });
  callback(null, 'createCommonFiles');
}

/**
 * Replace config files.
 *
 * Only db name by now.
 */

function replaceConfig(callback){

  // replace db connection name
  replace({
    regex: templateName('apiarista-template'),
    replacement: projectName,
    paths: [path.join(currentDir, '/data/config')],
    recursive: true,
    silent: true
  });
  callback(null, 'replaceConfig');
}

/**
 * Check existence of resource files.
 *
 * Aborts when one of the paths exists.
 */

function checkResourceExistence(callback){
      paths = [
        '/data/schemas/' + lowerName + '.js',
        '/data/models/' + lowerName + '.js',
        '/api/resources/' + lowerName,
        '/api/resources/' + lowerName + '/index.js',
        '/api/resources/' + lowerName + '/crud',
        '/api/resources/' + lowerName + '/crud/list.js',
        '/api/resources/' + lowerName + '/crud/create.js',
        '/api/resources/' + lowerName + '/crud/update.js',
        '/api/resources/' + lowerName + '/crud/delete.js'
      ];

  paths.forEach(function(_path){
    var realPath = path.join(currentDir, _path),
        exists = fs.existsSync(realPath);
    if (exists) {
      data.present.push(realPath);
      callback(new Error('exists -> ' + realPath));
    } else {
      data.absent.push(realPath);
    }
  });
  callback(null, 'checkResourceExistence')
}

/**
 * Create schema, model and crud for resource.
 *
 */

function createResource(callback){
      paths = function(name){
        name = name || defaultLowerName;
        var p = [
          '/data/schemas/' + name + '.js',
          '/data/models/' + name + '.js',
          '/api/resources/' + name,
          '/api/resources/' + name + '/index.js',
          '/api/resources/' + name + '/crud',
          '/api/resources/' + name + '/crud/list.js',
          '/api/resources/' + name + '/crud/create.js',
          '/api/resources/' + name + '/crud/update.js',
          '/api/resources/' + name + '/crud/delete.js'
        ];
        return p;
      }

  paths(lowerName).forEach(function(resourcePath, index){
    var targetRealPath = path.join(currentDir, resourcePath),
        exists = fs.existsSync(targetRealPath);
    if (exists) {
      data.present.push(targetRealPath);
    } else {
      data.absent.push(targetRealPath)
      var ext = path.extname(targetRealPath);
      if (ext !== '.js') {
        mkdirSync(targetRealPath, data.mkdirMode);
      } else {
        var originRealPath = path.join(templateDir, paths()[index]),
          templateFileContent = fs.readFileSync(originRealPath);
        writeFileSync(targetRealPath, templateFileContent, 'utf8');
      }
      data.created.push(targetRealPath)
    }
  });
  callback(null, 'createResource');
};

/**
 * Replace the default resource name with 'program.resource.toProperCase()'.
 *
 */

function replaceNames(callback){

  // resource paths
  var paths = [
    path.join(currentDir, '/data/schemas/' + lowerName + '.js'),
    path.join(currentDir, '/data/models/' + lowerName + '.js'),
    path.join(currentDir, '/api/resources/' + lowerName)
  ];

  // add a pluralize() function to the member named 'resources'
  var forReplace = [

    // plural

    // lowercase
    { from: templateName(pluralize(defaultLowerName)), to: pluralize(lowerName) },

    // propercase
    { from: templateName(pluralize(defaultProperName)), to: pluralize(properName) },

    // singular

    // lowercase
    { from: templateName(defaultLowerName), to: lowerName },

    // propercase
    { from: templateName(defaultProperName), to: properName }
  ];

  // replace resource name
  forReplace.forEach(function(replacement){
    var from = replacement.from,
        to = replacement.to;
    replace({
      regex: from,
      replacement: to,
      paths: paths,
      recursive: true,
      silent: true
    });
  });

  callback(null , 'replaceNames');
}

/**
 * Upgrade the generated Schema.
 *
 * Add fields from program options data.
 *
 */

function upgradeSchema(callback){

  var targetPath = path.join(currentDir, '/data/schemas/' + lowerName + '.js'),
      fields = program.args,
      code = [],
      leftSpace = '  ';

  for (var i = 0; i < fields.length; i++) {
    code.push(leftSpace + ', ' + fields[i]);
  };

  if (code.length) {
    code[0] = code[0].slice(leftSpace.length);
  }

  code = code.join(eol);

  var argsFields = {
    regex: '\/\/FIELDS PLACEHOLDER',
    replacement: code.length ? code : undefined,
    paths: [targetPath],
    recursive: false,
    silent: true,
  };

  replace(argsFields);
  callback(null, 'upgradeSchema');
};

/**
 * Replace conditional code.
 *
 * If program.owned then //IF-OWNED is removed
 *
 */

function replaceConditionals(callback){

  // relevant paths
  var paths = [
    path.join(currentDir, '/data/schemas/' + lowerName + '.js'),
    path.join(currentDir, '/api/resources/' + lowerName + '/index.js')
  ];

  // program flags
  var flags = [ 'owner', 'auth' ],
      ifConditionals = [];

  // defaults
  defaults = { owner: 'user' };

  // generate data for replacement
  flags.forEach(function(flag, index) {
    var conditional = { 
      name: flag,
      flag: program[flag],
      ifRegex: '\/\/IF_' + flag.toUpperCase() + ' ',
      ifReplacement: '',
      templateRegexLower: templateName(flag),
      templateRegexProper: templateName(flag.toProperCase())
    };
    ifConditionals.push(conditional);
  });

  // Replace templated conditionals like $owner
  ifConditionals.forEach(function(conditional, index) {
    var flag = conditional.flag;
    if (flag) {
      // remove all //IF-FLAG
      replace({
        regex: conditional.ifRegex,
        replacement: conditional.ifReplacement,
        paths: paths,
        recursive: false,
        silent: true
      });
      // replace $flag
      var defName = defaults[conditional.name];
      replace({
        regex: conditional.templateRegexLower,
        replacement: (typeof flag === 'string' ? flag.toLowerCase() : defName && defName.toLowerCase()),
        paths: paths,
        recursive: false,
        silent: true
      });
      // replace $Flag
      replace({
        regex: conditional.templateRegexProper,
        replacement: (typeof flag === 'string' ? flag.toProperCase() : defName && defName.toProperCase()),
        paths: paths,
        recursive: false,
        silent: true
      });
    };
  });

  callback(null, 'replaceConditionals');
};

/**
 * Upgrade api/index.js routes.
 *
 * Add resource to api index for routing.
 *
 */

function upgradeApiIndex(callback){
  var targetPath = path.join(currentDir, '/api/index.js'),
      code = [],
      leftSpace = '  ';

  code.push('//CRUDs PLACEHOLDER');
  code.push('');
  code.push(leftSpace + 'require(\'./resources/' + lowerName  + '\')(app);');

  code = code.join(eol);

  var args = {
    regex: '\/\/CRUDs PLACEHOLDER',
    replacement: code,
    paths: [targetPath],
    recursive: false,
    silent: true,
  };

  replace(args);
  callback(null, 'upgradeApiIndex');
};

/**
 * Update app dependencies with apiarist-template dependencies.
 *
 */

function updateDependencies(callback){
  var targetPkgPath = path.join(currentDir, '/package.json'),
      targetPkg = require(targetPkgPath),
      originPkgPath = path.join(templateDir, '/package.json'),
      originPkg = require(originPkgPath);

  // load target pkg
  var merge = targetPkg;

  // dont merge irrelevant dependencies
  var exclude = {
    "jade": "*",
    "stylus": "*"
  };

  // add origin dependencies
  for (var key in originPkg.dependencies){
    if (!merge.dependencies.hasOwnProperty(key) && !(key in exclude)) {
      merge.dependencies[key] = originPkg.dependencies[key];
    }
  }

  // write updated pkg
  writeFileSync(targetPkgPath, JSON.stringify(merge, null, 4), 'utf8', 'updated');

  callback(null, 'updateDependencies');
};

// inspired by '../node_modules/express/bin/express'.

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function writeFileSync(path, str, encoding, message) {
  fs.writeFileSync(path, str);
  console.log('   \x1b[36m%s\x1b[0m : ' + path, message || 'create');
}

/**
 * mkdirSync
 *
 * @param {String} path
 * @param {Number} mode
 */

function mkdirSync(path, mode) {
  fs.mkdirSync(path, mode);
  console.log('   \033[36mcreate\033[0m : ' + path);
}

/**
 *
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.log();
  console.error('   ' + str);
  console.log();
  process.exit(1);
}