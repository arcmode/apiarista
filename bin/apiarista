#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander'),
    async = require('async'),
    wrench = require('wrench'),
    path = require('path'),
    os = require('os'),
    fs = require('fs'),
    child_process = require('child_process'),
    replace = require('replace');

program
  .version(require('../package').version)
  .option('-i, install', 'install base api')
  .option('-r, resource [ResourceName]', 'generate resource')
  .option('-f, force', 'force resource creation')
  .parse(process.argv);

// end-of-line code

var eol = 'win32' == os.platform() ? '\r\n' : '\n';

// utility to propercase the resource name

String.prototype.toProperCase = function () {
    return this.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
};

// dirs to operate

var templateDir = path.join(__dirname, '../node_modules/api-template'),
    currentDir = process.cwd();

// data used during operations

var data = {
  methods: {
      testApp: testApp
    , createCommonDirs: createCommonDirs
    , createCommonFiles: createCommonFiles
    , checkResourceExistence: checkResourceExistence
    , createResource: createResource
    , replaceNames: replaceNames
    , upgradeSchema: upgradeSchema
  },
  pipeline: [testApp],
  mkdirMode: 0777 & (~process.umask()),
  app: undefined,
  absent: [],
  present: [],
  created: []
}

// for (key in data.methods){
//   var value = data.methods[key];
//   data.pipeline.push(value);
// };

var install = program.install,
    resource = program.resource;

if (install || resource) {
  data.pipeline.push(data.methods.createCommonDirs);
  data.pipeline.push(data.methods.createCommonFiles);

}

if (resource && typeof resource === 'string') {
  if (!program.force) { data.pipeline.push(data.methods.checkResourceExistence); }
  data.pipeline.push(data.methods.createResource);
  data.pipeline.push(data.methods.replaceNames);
  data.pipeline.push(data.methods.upgradeSchema);
}

// operate in series

async.series(data.pipeline, function(err, results){

  if (err) { abort(err); }

  console.log();

  console.log(data);

  console.log();

  console.log('    END');
});

function testApp(callback){
  fs.exists(path.join(currentDir, '/app.js'), function(exists){
    if (exists) {
      data.app = '/app.js';
      data.present.push(data.app);
      callback();
    } else {
      fs.exists(path.join(currentDir, '/server.js'), function(exists){
        if (exists) {
          data.app = '/server.js';
          data.present.push(data.app);
          callback();
        } else {
          data.absent.push(data.app);
          abort('    app/server not found')
        }
      });
    }
  });
};

function createCommonDirs(callback) {
  var dirs = [
    '/data',
    '/data/schemas',
    '/data/models',
    '/api',
    '/api/auth',
    '/api/resources',
    '/api/resources/consumer',
    '/api/resources/consumer/crud',
    '/api/resources/user',
    '/api/resources/user/crud'
  ];

  dirs.forEach(function(dir){
    dirPath = path.join(currentDir, dir);
        exists = fs.existsSync(dirPath);
    if (exists) {
      data.present.push(dirPath);
    } else {
      data.absent.push(dirPath);
      fs.mkdirSync(dirPath, data.mkdirMode);
      data.created.push(dirPath);
    }
  });
  callback(null, 'createDirs');
};

function createCommonFiles(callback) {
  var files = [
    '/data/schemas/user.js',
    '/data/schemas/consumer.js',
    '/api/index.js',
    '/api/auth/user.js',
    '/api/auth/consumer.js',
    '/api/auth/same.js',
    '/api/auth/owner.js',
    '/api/resources/user/crud/index.js',
    '/api/resources/user/crud/list.js',
    '/api/resources/user/crud/create.js',
    '/api/resources/user/crud/read.js',
    '/api/resources/user/crud/update.js',
    '/api/resources/user/crud/delete.js',
    '/api/resources/consumer/crud/index.js',
    '/api/resources/consumer/crud/create.js',
    '/api/resources/consumer/crud/delete.js'
  ];

  files.forEach(function(file){
    var filePath = path.join(currentDir, file),
        exists = fs.existsSync(filePath);
    if (exists) {
      data.present.push(filePath);
    } else {
      var templateFilePath = path.join(templateDir, file),
          templateFileContent = fs.readFileSync(templateFilePath);
      data.absent.push(filePath)
      fs.writeFileSync(filePath, templateFileContent, 'utf8');
      data.created.push(filePath)
    }
  });
  callback(null, 'createFiles');
}

function checkResourceExistence(callback){
  var resourceName = program.resource,
      paths = [
        '/data/schemas/' + resourceName + '.js',
        '/data/models/' + resourceName + '.js',
        '/api/resources/' + resourceName + '/crud/index.js',
        '/api/resources/' + resourceName + '/crud/list.js',
        '/api/resources/' + resourceName + '/crud/create.js',
        '/api/resources/' + resourceName + '/crud/read.js',
        '/api/resources/' + resourceName + '/crud/update.js',
        '/api/resources/' + resourceName + '/crud/delete.js'
      ];

  paths.forEach(function(_path){
    var realPath = path.join(currentDir, _path),
        exists = fs.existsSync(realPath);
    if (exists) {
      data.present.push(realPath);
      callback(new Error('exists -> ' + realPath));
    } else {
      data.absent.push(realPath);
    }
  });
  callback(null, '    checkResourceExistence')
}

function createResource(callback){
  var resourceName = program.resource,
      paths = function(name){
        var defaultName = 'resource';
        resource = (name && name.toLowerCase()) || defaultName;
        var p = [
          '/data/schemas/' + resource + '.js',
          '/data/models/' + resource + '.js',
          '/api/resources/' + resource,
          '/api/resources/' + resource + '/crud',
          '/api/resources/' + resource + '/crud/index.js',
          '/api/resources/' + resource + '/crud/list.js',
          '/api/resources/' + resource + '/crud/create.js',
          '/api/resources/' + resource + '/crud/read.js',
          '/api/resources/' + resource + '/crud/update.js',
          '/api/resources/' + resource + '/crud/delete.js'
        ];
        return p;
      }

  paths(resourceName).forEach(function(resourcePath, index){
    var targetRealPath = path.join(currentDir, resourcePath),
        exists = fs.existsSync(targetRealPath);
    if (exists) {
      data.present.push(targetRealPath);
    } else {
      data.absent.push(targetRealPath)
      var ext = path.extname(targetRealPath);
      if (ext !== '.js') {
        fs.mkdirSync(targetRealPath, data.mkdirMode);
      } else {
        var originRealPath = path.join(templateDir, paths()[index]),
          templateFileContent = fs.readFileSync(originRealPath);
        fs.writeFileSync(targetRealPath, templateFileContent, 'utf8');
      }
      data.created.push(targetRealPath)
    }
  });
  callback(null, 'createFiles');
};

function replaceNames(callback){

  var lowerName = program.resource.toLowerCase(),
      properName = program.resource.toProperCase();

  var paths = [
    path.join(currentDir, '/data/schemas/' + lowerName + '.js'),
    path.join(currentDir, '/data/models/' + lowerName + '.js'),
    path.join(currentDir, '/api/resources/' + lowerName)
  ];

  var forReplace = [
    { from: 'resource', to: lowerName },
    { from: 'resource_id', to: lowerName + '_id' },
    { from: 'Resource', to: properName }
  ];

  forReplace.forEach(function(replacement){
    var from = replacement.from,
        to = replacement.to;
    replace({
      regex: from,
      replacement: to,
      paths: paths,
      recursive: true,
      silent: true,
    });
  });

  callback();
}

function upgradeSchema(callback){

  var lowerName = program.resource.toLowerCase(),
      targetPath = path.join(currentDir, '/data/schemas/' + lowerName + '.js'),
      fields = program.args,
      code = [],
      leftSpace = '  ';

  for (var i = 0; i < fields.length; i++) {
    code.push(leftSpace + fields[i]  + ',');
  };
  code[0] = code[0].slice(leftSpace.length);
  code = code.join(eol);

  var args = {
    regex: '\/\/FIELDS PLACEHOLDER',
    replacement: code,
    paths: [targetPath],
    recursive: false,
    silent: true,
  };

  replace(args);
  callback();
};

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.log();
  console.error('    ' + str);
  console.log();
  process.exit(1);
}

function flushSystem(callback){
    async.each(sourceDirs, function(dir, callback){
      if (storage.exists[dir]) {
        var target = path.join(currentDir, dir);
        wrench.rmdirSyncRecursive(target);
        console.log('     FLUSHED:     ' + target);
      }
    },
    function(err){
      if (err) { callback(err); }
      callback && callback(null, 'flush OK');
    });
};